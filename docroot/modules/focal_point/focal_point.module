<?php

/**
 * @file
 * Allow users to specify a focal point on content images.
 *
 * @todo add support for default focal point value calculation method.
 * @todo add test drive functionality?
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function focal_point_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.focal_point':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("Focal Point allows you to specify the portion of an image that is most important.</br>This information can be used when the image is cropped or cropped and scaled so that you don't, for example, end up with an image that cuts off the subject's head.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function focal_point_theme($existing, $type, $theme, $path) {
  return [
    'focal_point_preview_page' => [
      'variables' => [
        'original_image' => NULL,
        'derivative_images' => [],
        'focal_point' => '',
        'preview_image_note' => '',
        'derivative_image_note' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_entity_insert().
 *
 * @see focal_point_entity_update
 */
function focal_point_entity_insert(EntityInterface $entity) {
  focal_point_entity_update($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Saves the focal point value for the image file entity about to be saved.
 */
function focal_point_entity_update(EntityInterface $entity) {
  // Only worry about entities that are fieldable.
  if ($entity instanceof FieldableEntityInterface) {
    // Loop all the fields and save focal point values for images.
    foreach ($entity->getFieldDefinitions() as $key => $field) {
      if ($field->getType() == 'image' && $entity->hasField($field->getName())) {
        $crop_type = \Drupal::config('focal_point.settings')->get('crop_type');
        // Loop through all values for this field. Its cardinality might be > 1.
        foreach ($entity->{$field->getName()} as $item) {
          /** @var \Drupal\focal_point\FocalPointManagerInterface $focal_point_manager */
          $focal_point_manager = \Drupal::service('focal_point.manager');
          $crop = $focal_point_manager->getCropEntity($item->entity, $crop_type);

          $focal_point = NULL;
          // Use the default focal point on new crop entities.
          if ($crop->isNew()) {
            $focal_point = \Drupal::config('focal_point.settings')->get('default_value');
          }
          // Use the focal point set over the UI.
          if (!empty($item->focal_point)) {
            $focal_point = $item->focal_point;
          }
          if ($focal_point) {
            list($x, $y) = explode(',', $focal_point);
            $focal_point_manager->saveCropEntity($x, $y, $item->width, $item->height, $crop);
          }
        }
      }
    }
  }
}

/**
 * Add the focal point widget to the allowed widgets list in IMCE.
 *
 * @param array $widgets
 *   The existing list of widgets to add to.
 */
function focal_point_imce_supported_widgets_alter(array &$widgets) {
  $widgets[] = 'image_focal_point';
}
